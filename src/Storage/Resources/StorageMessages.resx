<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthenticationIsNotSupported" xml:space="preserve">
    <value>The authentication is not supported.</value>
  </data>
  <data name="AuthenticationIsNull" xml:space="preserve">
    <value>The authentication is null.</value>
  </data>
  <data name="ClientIsNull" xml:space="preserve">
    <value>The HTTP client is null.</value>
  </data>
  <data name="DestinationPathExists" xml:space="preserve">
    <value>The destination path already exists.</value>
  </data>
  <data name="DestinationPathInvalidFormat" xml:space="preserve">
    <value>The destination path is in an invalid format.</value>
  </data>
  <data name="DestinationPathIsEmpty" xml:space="preserve">
    <value>The destination path is empty, or consists only of white space characters.</value>
  </data>
  <data name="DestinationPathIsNull" xml:space="preserve">
    <value>The destination path is null.</value>
  </data>
  <data name="DriverIsNull" xml:space="preserve">
    <value>The driver is null.</value>
  </data>
  <data name="FileSystemOperationNotSupported" xml:space="preserve">
    <value>The operation is not supported by the file system.</value>
  </data>
  <data name="HostnameIsEmpty" xml:space="preserve">
    <value>The hostname is empty, or consists only of whitespace characters.</value>
  </data>
  <data name="HostnameIsInvalid" xml:space="preserve">
    <value>The hostname is in an invalid format.</value>
  </data>
  <data name="HostnameIsNull" xml:space="preserve">
    <value>The hostname is null.</value>
  </data>
  <data name="InvalidFileAccess" xml:space="preserve">
    <value>The file access is invalid.</value>
  </data>
  <data name="InvalidFileMode" xml:space="preserve">
    <value>The file mode is invalid.</value>
  </data>
  <data name="InvalidFileModeOrAccess" xml:space="preserve">
    <value>The specified file mode and file access combination is invalid.</value>
  </data>
  <data name="InvalidResponseFromRemote" xml:space="preserve">
    <value>The remote address returned with an invalid response.</value>
  </data>
  <data name="InvalidSearchPattern" xml:space="preserve">
    <value>The search pattern is an invalid format.</value>
  </data>
  <data name="LengthIsLessThan0" xml:space="preserve">
    <value>The length is less than 0.</value>
  </data>
  <data name="LocationIsNull" xml:space="preserve">
    <value>The location is null.</value>
  </data>
  <data name="NameIsNull" xml:space="preserve">
    <value>The name is null.</value>
  </data>
  <data name="NoConnectionToFileSystem" xml:space="preserve">
    <value>No connection is available to the file system.</value>
  </data>
  <data name="NoConnectionToPath" xml:space="preserve">
    <value>No connection is available to the specified path.</value>
  </data>
  <data name="OffsetIsLessThan0" xml:space="preserve">
    <value>The offset is less than 0.</value>
  </data>
  <data name="PathDoesNotExist" xml:space="preserve">
    <value>The path does not exist.</value>
  </data>
  <data name="PathExists" xml:space="preserve">
    <value>The path already exists.</value>
  </data>
  <data name="PathInUse" xml:space="preserve">
    <value>The file system entry on the specified path is currently in use.</value>
  </data>
  <data name="PathIsDirectory" xml:space="preserve">
    <value>The path is a directory.</value>
  </data>
  <data name="PathIsEmpty" xml:space="preserve">
    <value>The path is empty, or consists only of white space characters.</value>
  </data>
  <data name="PathIsFile" xml:space="preserve">
    <value>The specified path is a file.</value>
  </data>
  <data name="PathIsInInvalidFormat" xml:space="preserve">
    <value>The path is in an invalid format.</value>
  </data>
  <data name="PathIsNotSupported" xml:space="preserve">
    <value>The path is not supported.</value>
  </data>
  <data name="PathIsNull" xml:space="preserve">
    <value>The path is null.</value>
  </data>
  <data name="PathIsReadOnly" xml:space="preserve">
    <value>The file on path is read-only.</value>
  </data>
  <data name="PathIsTooLong" xml:space="preserve">
    <value>The path exceeds the maximum length supported by the file system.</value>
  </data>
  <data name="PathUnauthorized" xml:space="preserve">
    <value>The caller does not have the required permission for the path.</value>
  </data>
  <data name="PostNumberIsLessThan1" xml:space="preserve">
    <value>The port number is less than 1.</value>
  </data>
  <data name="SourceAndDestinationPathEqual" xml:space="preserve">
    <value>The source and destination paths are equal.</value>
  </data>
  <data name="SourceOrDestinationPathUnauthorized" xml:space="preserve">
    <value>The caller does not have the required permission for either the source or the destination path.</value>
  </data>
  <data name="SourcePathDoesNotExist" xml:space="preserve">
    <value>The source path does not exist.</value>
  </data>
  <data name="SourcePathIsEmpty" xml:space="preserve">
    <value>The source path is empty, or consists only of white space characters.</value>
  </data>
  <data name="SourcePathIsInInvalidFormat" xml:space="preserve">
    <value>The source path is in an invalid format.</value>
  </data>
  <data name="SourcePathIsNull" xml:space="preserve">
    <value>The source path is null.</value>
  </data>
  <data name="SourcePathTooLong" xml:space="preserve">
    <value>The path exceeds the maximum length supported by the file system.</value>
  </data>
  <data name="TypeIsNull" xml:space="preserve">
    <value>The type is null.</value>
  </data>
  <data name="Unauthorized" xml:space="preserve">
    <value>The caller does not have the required permission.</value>
  </data>
  <data name="UriSchemeIsNull" xml:space="preserve">
    <value>The URI scheme is null.</value>
  </data>
  <data name="UsernameIsEmpty" xml:space="preserve">
    <value>The username is empty.</value>
  </data>
  <data name="UsernameIsNull" xml:space="preserve">
    <value>The username is null.</value>
  </data>
</root>