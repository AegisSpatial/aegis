<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArrayIndexIsGreaterThanSpace" xml:space="preserve">
    <value>The number of elements in the source collection is greater than the available space from the array index to the end of the destination array.</value>
  </data>
  <data name="ArrayIndexIsLessThan0" xml:space="preserve">
    <value>The array index is less than 0.</value>
  </data>
  <data name="ArrayIsNull" xml:space="preserve">
    <value>The array is null.</value>
  </data>
  <data name="CapacityLessThan0" xml:space="preserve">
    <value>The capacity is less than 0.</value>
  </data>
  <data name="CapacityLessThanCount" xml:space="preserve">
    <value>Capacity is set to a value that is less than Count.</value>
  </data>
  <data name="CollectionIsEmpty" xml:space="preserve">
    <value>The collection is empty.</value>
  </data>
  <data name="CollectionIsNull" xml:space="preserve">
    <value>The collection is null.</value>
  </data>
  <data name="CollectionWasModifiedAfterEnumerator" xml:space="preserve">
    <value>The collection was modified after the enumerator was created.</value>
  </data>
  <data name="CountIsLessThan1" xml:space="preserve">
    <value>The count is less than 1.</value>
  </data>
  <data name="DictionaryIsNull" xml:space="preserve">
    <value>The dictionary is null.</value>
  </data>
  <data name="FirstItemIsNotPresentInAnySet" xml:space="preserve">
    <value>The first item is not present in any set.</value>
  </data>
  <data name="FirstItemIsNull" xml:space="preserve">
    <value>The first item is null.</value>
  </data>
  <data name="HeapIsEmpty" xml:space="preserve">
    <value>The heap is empty.</value>
  </data>
  <data name="HeapIsNull" xml:space="preserve">
    <value>The heap is null.</value>
  </data>
  <data name="IndexIsEqualToOrGreaterThanArraySize" xml:space="preserve">
    <value>The index is equal to or greater than the number of items in the array.</value>
  </data>
  <data name="IndexIsEqualToOrGreaterThanCount" xml:space="preserve">
    <value>The index is equal to or greater than the count.</value>
  </data>
  <data name="IndexIsLessThan0" xml:space="preserve">
    <value>The index is less than 0.</value>
  </data>
  <data name="ItemIsNotPresentInAnySet" xml:space="preserve">
    <value>The item is not present in any set.</value>
  </data>
  <data name="ItemIsNull" xml:space="preserve">
    <value>The item is null.</value>
  </data>
  <data name="KeyExists" xml:space="preserve">
    <value>An element with the same key already exists in the tree.</value>
  </data>
  <data name="KeyIsNull" xml:space="preserve">
    <value>The key is null.</value>
  </data>
  <data name="KeyNotExists" xml:space="preserve">
    <value>The tree does not contain the specified key.</value>
  </data>
  <data name="LengthIsLessThan0" xml:space="preserve">
    <value>The length is less than 0.</value>
  </data>
  <data name="PredicateIsNull" xml:space="preserve">
    <value>The predicate is null.</value>
  </data>
  <data name="SecondItemIsNotPresentInAnySet" xml:space="preserve">
    <value>The second item is not present in any set.</value>
  </data>
  <data name="SecondItemIsNull" xml:space="preserve">
    <value>The second item is null.</value>
  </data>
  <data name="SelectorIsNull" xml:space="preserve">
    <value>The selector is null.</value>
  </data>
  <data name="SetIsNull" xml:space="preserve">
    <value>The set is null.</value>
  </data>
  <data name="SetIsReadOnly" xml:space="preserve">
    <value>The set is read-only.</value>
  </data>
  <data name="SourceIsNull" xml:space="preserve">
    <value>The source is null.</value>
  </data>
  <data name="TooManyElementsInArray" xml:space="preserve">
    <value>The array contains more elements than the maximum value.</value>
  </data>
  <data name="TreeIsNull" xml:space="preserve">
    <value>The tree is null.</value>
  </data>
</root>