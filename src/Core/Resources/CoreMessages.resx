<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CollectionContainsDuplicateIdentifiers" xml:space="preserve">
    <value>The collection contains one or more duplicate identifiers.</value>
  </data>
  <data name="ConvexityRatioGreaterThan1" xml:space="preserve">
    <value>The convexity ratio is greater than 1.</value>
  </data>
  <data name="ConvexityRatioLessThan0" xml:space="preserve">
    <value>The convexity ratio is less than 0.</value>
  </data>
  <data name="CoordinateCountLessThan3" xml:space="preserve">
    <value>The number of coordinates is less than 3.</value>
  </data>
  <data name="DeltaIsEqualToOrLessThan0" xml:space="preserve">
    <value>The delta is less than or equal to 0.</value>
  </data>
  <data name="DimensionIsGreaterThan3" xml:space="preserve">
    <value>The dimension is greater than 3.</value>
  </data>
  <data name="DimensionIsInvalid" xml:space="preserve">
    <value>The specified dimension is invalid.</value>
  </data>
  <data name="DimensionIsLessThan2" xml:space="preserve">
    <value>The dimension is less than 2.</value>
  </data>
  <data name="EnvelopeMinIsGreaterThanMax" xml:space="preserve">
    <value>The envelope's minimum coordinate is greater than the maximum coordinate.</value>
  </data>
  <data name="EventEdgeIsGreaterThanNumberOfEdges" xml:space="preserve">
    <value>The edge of the event is greater than the number of edges in the source.</value>
  </data>
  <data name="EventEdgeIsLessThan0" xml:space="preserve">
    <value>The edge of the event is less than 0.</value>
  </data>
  <data name="FactoryIsInvalid" xml:space="preserve">
    <value>The factory is invalid.</value>
  </data>
  <data name="FactoryNotImplementingContract" xml:space="preserve">
    <value>The factory behavior does not implement the contract.</value>
  </data>
  <data name="GeometryComparisonNotSupported" xml:space="preserve">
    <value>Comparison of the specified geometries is not supported.</value>
  </data>
  <data name="GeometryIsInvalid" xml:space="preserve">
    <value>The specified geometry is invalid.</value>
  </data>
  <data name="GeometryIsNotSupported" xml:space="preserve">
    <value>The specified geometry is not supported.</value>
  </data>
  <data name="GeometryTypeNotSupported" xml:space="preserve">
    <value>The type of the geometry is not supported.</value>
  </data>
  <data name="HolesNotSupportedInTriangle" xml:space="preserve">
    <value>Holes are not supported in the triangle.</value>
  </data>
  <data name="IndexIsEqualToOrGreaterThanHoleCount" xml:space="preserve">
    <value>Index is equal to or greater than the number of holes.</value>
  </data>
  <data name="IndexIsEqualToOrGreaterThanNumberOfCoordinates" xml:space="preserve">
    <value>The index is equal to or greater than the number of coordinates.</value>
  </data>
  <data name="InvalidObjectEquality" xml:space="preserve">
    <value>The Equals() method for the given type returns false for the same instances.</value>
  </data>
  <data name="ItemIdentifierExists" xml:space="preserve">
    <value>An item with the same identifier already exists in the collection.</value>
  </data>
  <data name="ItemWasAlreadyInTree" xml:space="preserve">
    <value>The specified item was already in the tree.</value>
  </data>
  <data name="LineExtensionNotSupported" xml:space="preserve">
    <value>Extension of lines is not supported.</value>
  </data>
  <data name="LineReductionNotSupported" xml:space="preserve">
    <value>Reduction of lines is not supported.</value>
  </data>
  <data name="MaximumNumberOfChildNodesIsEqualToMinimum" xml:space="preserve">
    <value>The maximum number of child nodes is equal to or less than the minimum number of child nodes.</value>
  </data>
  <data name="MinimumNumberOfChildNodesIsLessThan1" xml:space="preserve">
    <value>The minimum number of child nodes is less than 1.</value>
  </data>
  <data name="NoHolesInPolygon" xml:space="preserve">
    <value>There are no holes in the polygon.</value>
  </data>
  <data name="NoModelsSpecified" xml:space="preserve">
    <value>No models are specified.</value>
  </data>
  <data name="NumberOfCoordinatesIsLessThan3" xml:space="preserve">
    <value>The number of coordinates is less than 3.</value>
  </data>
  <data name="OtherGeometryNotSupported" xml:space="preserve">
    <value>The type of the other geometry is not supported.</value>
  </data>
  <data name="ScaleIsEqualToOrLessThan0" xml:space="preserve">
    <value>The scale is equal to or less than 0.</value>
  </data>
  <data name="SegmentsDoNotIntersect" xml:space="preserve">
    <value>The segments do not intersect.</value>
  </data>
  <data name="SegmentsDoNotOverlap" xml:space="preserve">
    <value>The segments do not overlap.</value>
  </data>
  <data name="SourceIsInvalid" xml:space="preserve">
    <value>The specified source is invalid.</value>
  </data>
  <data name="SourceIsNotSupported" xml:space="preserve">
    <value>The specified source is not supported.</value>
  </data>
</root>