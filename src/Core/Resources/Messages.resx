<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArrayIndexIsGreaterThanSpace" xml:space="preserve">
    <value>The number of elements in the source collection is greater than the available space from the array index to the end of the destination array.</value>
  </data>
  <data name="ArrayIsNull" xml:space="preserve">
    <value>The array is null.</value>
  </data>
  <data name="BufferIsNull" xml:space="preserve">
    <value>The buffer is null.</value>
  </data>
  <data name="CapacityLessThan0" xml:space="preserve">
    <value>The capacity is less than 0.</value>
  </data>
  <data name="CoordinateIsNull" xml:space="preserve">
    <value>The coordinate is null.</value>
  </data>
  <data name="CoordinatesArrayIsNull" xml:space="preserve">
    <value>The array of coordinates is null.</value>
  </data>
  <data name="CoordinatesCollectionIsNull" xml:space="preserve">
    <value>The collection of coordinates is null.</value>
  </data>
  <data name="DeltaIsEqualToOrLessThan0" xml:space="preserve">
    <value>The delta is less than or equal to 0.</value>
  </data>
  <data name="EndPointIsNull" xml:space="preserve">
    <value>The end point is null.</value>
  </data>
  <data name="EnvelopeIsNull" xml:space="preserve">
    <value>The envelope is null.</value>
  </data>
  <data name="EventEdgeIsGreaterThanNumberOfEdges" xml:space="preserve">
    <value>The edge of the event is greater than the number of edges in the source.</value>
  </data>
  <data name="EventEdgeIsLessThan0" xml:space="preserve">
    <value>The edge of the event is less than 0.</value>
  </data>
  <data name="EventIsNull" xml:space="preserve">
    <value>The event is null.</value>
  </data>
  <data name="FactoryBehaviorIsNull" xml:space="preserve">
    <value>The factory behavior is null.</value>
  </data>
  <data name="FactoryContractIsNull" xml:space="preserve">
    <value>The factory contact is null.</value>
  </data>
  <data name="FactoryIsInvalid" xml:space="preserve">
    <value>The factory is invalid.</value>
  </data>
  <data name="FactoryIsNull" xml:space="preserve">
    <value>The factory is null.</value>
  </data>
  <data name="FactoryNotImplementingContract" xml:space="preserve">
    <value>The factory behavior does not implement the contract.</value>
  </data>
  <data name="FirstCoordinateIsNull" xml:space="preserve">
    <value>The first coordinate is null.</value>
  </data>
  <data name="FirstPointIsNull" xml:space="preserve">
    <value>The first point is null.</value>
  </data>
  <data name="FirstPolygonIsNull" xml:space="preserve">
    <value>The first polygon is null.</value>
  </data>
  <data name="FirstVectorIsNull" xml:space="preserve">
    <value>The first vector is null.</value>
  </data>
  <data name="GeometryTypeNotSupported" xml:space="preserve">
    <value>The type of the geometry is not supported.</value>
  </data>
  <data name="HoleIsNull" xml:space="preserve">
    <value>The hole is null.</value>
  </data>
  <data name="HolesNotSupportedInTriangle" xml:space="preserve">
    <value>Holes are not supported in the triangle.</value>
  </data>
  <data name="IdentifierIsNull" xml:space="preserve">
    <value>The identifier is null.</value>
  </data>
  <data name="IndexIsEqualToOrGreaterThanHoleCount" xml:space="preserve">
    <value>Index is equal to or greater than the number of holes.</value>
  </data>
  <data name="IndexIsEqualToOrGreaterThanNumberOfCoordinates" xml:space="preserve">
    <value>The index is equal to or greater than the number of coordinates.</value>
  </data>
  <data name="IndexIsLessThan0" xml:space="preserve">
    <value>Index is less than 0.</value>
  </data>
  <data name="IntersectionEventIsNull" xml:space="preserve">
    <value>The intersection event is null.</value>
  </data>
  <data name="LineExtensionNotSupported" xml:space="preserve">
    <value>Extension of lines is not supported.</value>
  </data>
  <data name="LineReductionNotSupported" xml:space="preserve">
    <value>Reduction of lines is not supported.</value>
  </data>
  <data name="ModelsArrayIsNull" xml:space="preserve">
    <value>The array of models is null.</value>
  </data>
  <data name="NoHolesInPolygon" xml:space="preserve">
    <value>There are no holes in the polygon.</value>
  </data>
  <data name="NoModelsSpecified" xml:space="preserve">
    <value>No models are specified.</value>
  </data>
  <data name="NumberOfCoordinatesIsLessThan3" xml:space="preserve">
    <value>The number of coordinates is less than 3.</value>
  </data>
  <data name="OriginIsNull" xml:space="preserve">
    <value>The origin is null.</value>
  </data>
  <data name="OtherGeometryCollectionIsNull" xml:space="preserve">
    <value>The other geometry collection is null.</value>
  </data>
  <data name="OtherGeometryIsNull" xml:space="preserve">
    <value>The other geometry is null.</value>
  </data>
  <data name="OtherLinearRingIsNull" xml:space="preserve">
    <value>The other linear ring is null.</value>
  </data>
  <data name="OtherLineIsNull" xml:space="preserve">
    <value>The other line is null.</value>
  </data>
  <data name="OtherLineStringIsNull" xml:space="preserve">
    <value>The other line string is null.</value>
  </data>
  <data name="OtherMultiLineStringIsNull" xml:space="preserve">
    <value>The other multi line string is null.</value>
  </data>
  <data name="OtherMultiPointIsNull" xml:space="preserve">
    <value>The other multi point is null.</value>
  </data>
  <data name="OtherMultiPolygonIsNull" xml:space="preserve">
    <value>The other multi polygon is null.</value>
  </data>
  <data name="OtherPointIsNull" xml:space="preserve">
    <value>The other point is null.</value>
  </data>
  <data name="OtherPolygonIsNull" xml:space="preserve">
    <value>The other polygon is null.</value>
  </data>
  <data name="OtherTriangleIsNull" xml:space="preserve">
    <value>The other triangle is null.</value>
  </data>
  <data name="PolygonIsNull" xml:space="preserve">
    <value>The polygon is null.</value>
  </data>
  <data name="ScaleIsEqualToOrLessThan0" xml:space="preserve">
    <value>The scale is equal to or less than 0.</value>
  </data>
  <data name="SecondCoordinateIsNull" xml:space="preserve">
    <value>The second Coordinate is null.</value>
  </data>
  <data name="SecondPointIsNull" xml:space="preserve">
    <value>The second point is null.</value>
  </data>
  <data name="SecondPolygonIsNull" xml:space="preserve">
    <value>The second polygon is null.</value>
  </data>
  <data name="SecondVectorIsNull" xml:space="preserve">
    <value>The second vector is null.</value>
  </data>
  <data name="SegmentIsNull" xml:space="preserve">
    <value>The segment is null.</value>
  </data>
  <data name="SegmentsDoNotIntersect" xml:space="preserve">
    <value>The segments do not intersect.</value>
  </data>
  <data name="SegmentsDoNotOverlap" xml:space="preserve">
    <value>The segments do not overlap.</value>
  </data>
  <data name="ShellIsNull" xml:space="preserve">
    <value>The shell is null.</value>
  </data>
  <data name="SourceIsNull" xml:space="preserve">
    <value>The source is null.</value>
  </data>
  <data name="StartPointIsNull" xml:space="preserve">
    <value>The start point is null.</value>
  </data>
  <data name="ThirdPointIsNull" xml:space="preserve">
    <value>The third point is null.</value>
  </data>
  <data name="VectorArrayIsNull" xml:space="preserve">
    <value>The array of vectors is null.</value>
  </data>
  <data name="VectorCollectionIsNull" xml:space="preserve">
    <value>The collection of vectors is null.</value>
  </data>
  <data name="VectorIsNull" xml:space="preserve">
    <value>The vector is null.</value>
  </data>
  <data name="CollectionIsNull" xml:space="preserve">
    <value>The collection is null.</value>
  </data>
  <data name="GeometryIsNull" xml:space="preserve">
    <value>The geometry is null.</value>
  </data>
  <data name="MaximumNumberOfChildNodesIsEqualToMinimum" xml:space="preserve">
    <value>The maximum number of child nodes is equal to or less than the minimum number of child nodes.</value>
  </data>
  <data name="MinimumNumberOfChildNodesIsLessThan1" xml:space="preserve">
    <value>The minimum number of child nodes is less than 1.</value>
  </data>
  <data name="ClippingWindowIsNull" xml:space="preserve">
    <value>The clipping window is null.</value>
  </data>
</root>