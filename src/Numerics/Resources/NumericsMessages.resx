<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotApproximateValue" xml:space="preserve">
    <value>The value cannot be approximated.</value>
  </data>
  <data name="ColumnIndexOutsideMatrixBounds" xml:space="preserve">
    <value>Column index is outside the bounds of the matrix.</value>
  </data>
  <data name="DenominatorIsInt64Min" xml:space="preserve">
    <value>The denominator is -9223372036854775808.</value>
  </data>
  <data name="DenominatorTooLargeToEvaluate" xml:space="preserve">
    <value>The denominator is too large to evaluate.</value>
  </data>
  <data name="FirstCoefficientIsLessThan0" xml:space="preserve">
    <value>The first coefficient is less than 0.</value>
  </data>
  <data name="IndexIsOutsideVectorBounds" xml:space="preserve">
    <value>Index is outside the bounds of the vector.</value>
  </data>
  <data name="IntervalsNotPositiveEven" xml:space="preserve">
    <value>The number of intervals is not positive even.</value>
  </data>
  <data name="IterationLimitIsLessThan1" xml:space="preserve">
    <value>The iteration limit is less than 1.</value>
  </data>
  <data name="MatrixIsEmpty" xml:space="preserve">
    <value>The matrix is empty.</value>
  </data>
  <data name="MatrixIsNotInvertible" xml:space="preserve">
    <value>The matrix is not invertible.</value>
  </data>
  <data name="MatrixIsNotSquare" xml:space="preserve">
    <value>The matrix is not square.</value>
  </data>
  <data name="MatrixIsNotSymmetric" xml:space="preserve">
    <value>The matrix is not symmetric.</value>
  </data>
  <data name="MatrixNotSingleColumnOrRow" xml:space="preserve">
    <value>The matrix is neither single column, nor single row.</value>
  </data>
  <data name="MatrixRowsMoreThan1" xml:space="preserve">
    <value>The number of rows in the matrix is not 1.</value>
  </data>
  <data name="MatrixSizeDoesNotMatchVector" xml:space="preserve">
    <value>The size of the matrix does not match the size of the vector.</value>
  </data>
  <data name="MaxValueLessThan0" xml:space="preserve">
    <value>The maximum value is less than 0.</value>
  </data>
  <data name="MinValueGreaterThanMaxValue" xml:space="preserve">
    <value>The minimum value is greater than the maximum value.</value>
  </data>
  <data name="NumberOfColumnsDoesNotMatch" xml:space="preserve">
    <value>The number of columns does not match.</value>
  </data>
  <data name="NumberOfColumnsIsLessThan0" xml:space="preserve">
    <value>The number of columns is less than 0.</value>
  </data>
  <data name="NumberOfIterationsIsLessThan1" xml:space="preserve">
    <value>The number of iterations is less than 1.</value>
  </data>
  <data name="NumberOfRowsDoesNotMatch" xml:space="preserve">
    <value>The number of rows does not match.</value>
  </data>
  <data name="NumberOfRowsDoesNotMatchColumnsMatrix" xml:space="preserve">
    <value>The number of columns in the first matrix does not match the number of rows in the second matrix.</value>
  </data>
  <data name="NumberOfRowsIsLessThan0" xml:space="preserve">
    <value>The number of rows is less than 0.</value>
  </data>
  <data name="NumberOfValuesIsNotSquare" xml:space="preserve">
    <value>The number of values is not a square number.</value>
  </data>
  <data name="NumeratorTooLargeToEvaluate" xml:space="preserve">
    <value>The numerator is too large to evaluate.</value>
  </data>
  <data name="ObjectIsNotComparableWithRational" xml:space="preserve">
    <value>The object is not comparable with a rational number.</value>
  </data>
  <data name="PIsLessThan1" xml:space="preserve">
    <value>The value of p is less than 1.</value>
  </data>
  <data name="PrecisionIsLessThanOrEqualTo0" xml:space="preserve">
    <value>The precision is less than or equal to 0.</value>
  </data>
  <data name="RationalConversionOutOfRange" xml:space="preserve">
    <value>The value is too large or too small to be converted to rational.</value>
  </data>
  <data name="RowIndexOutsideMatrixBounds" xml:space="preserve">
    <value>Row index is outside the bounds of the matrix.</value>
  </data>
  <data name="SecondCoefficientIsLessThan0" xml:space="preserve">
    <value>The second coefficient is less than 0.</value>
  </data>
  <data name="SizeIsLessThan0" xml:space="preserve">
    <value>The size is less than 0.</value>
  </data>
  <data name="UnitIndexIsGeaterThanSize" xml:space="preserve">
    <value>The unit index is greater than or equal to the size.</value>
  </data>
  <data name="UnitIndexIsLessThan0" xml:space="preserve">
    <value>The unit index is less than 0.</value>
  </data>
  <data name="ValueCollectionIsEmpty" xml:space="preserve">
    <value>The collection of values is empty.</value>
  </data>
  <data name="ValueIsGreaterThanArg" xml:space="preserve">
    <value>The value is greater then {0}.</value>
  </data>
  <data name="ValueIsLessThanArg" xml:space="preserve">
    <value>The value is less than {0}.</value>
  </data>
  <data name="ValueIsLessThanOrEqualToArg" xml:space="preserve">
    <value>The value is less than or equal to {0}.</value>
  </data>
  <data name="VectorDimensionsAreDifferent" xml:space="preserve">
    <value>The dimensions of the two vectors are different.</value>
  </data>
</root>